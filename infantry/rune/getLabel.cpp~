/*
    Copyright (c) 2013, Taiga Nomi and the respective contributors
    All rights reserved.

    Use of this source code is governed by a BSD-style license that can be found
    in the LICENSE file.
*/
#include <iostream>
#include "tiny_dnn/tiny_dnn.h"
#include <opencv2/opencv.hpp>

using namespace tiny_dnn;
using namespace tiny_dnn::activation;
using namespace std;

// rescale output to 0-100
template <typename Activation>
//static network<sequential> nn;
double rescale(double x) {
  Activation a(1);
  return 100.0 * (x - a.scale().first) / (a.scale().second - a.scale().first);
}

void convert_image(cv::Mat img,
                   double scale,
                   int w,
                   int h,
                   std::vector<vec_t>& data)
{
    if (img.data == nullptr) return; // cannot open, or it's not an image

    cv::Mat_<uint8_t> resized;
    cv::resize(img, resized, cv::Size(w, h));
    vec_t d;

    std::transform(resized.begin(), resized.end(), std::back_inserter(d),
                   [=](uint8_t c) { return c * scale; });
    data.push_back(d);
}
/*
void cnn_init(const std::string &dictionary){
	nn.load(dictionary);
}
*/
int recognize(cv::Mat img) {

    static network<sequential> nn;
    nn.load(dictionary);
    // convert imagefile to vec_t
    vec_t data;
    convert_image(img, -1.0, 1.0, 32, 32, data);
    
    // recognize
    auto res = nn.predict(data);
    vector<pair<double, int>> scores;

    // sort & print top-3
    for (int i = 0; i < 10; i++)
    scores.emplace_back(rescale<tanh_layer>(res[i]), i);

    sort(scores.begin(), scores.end(), greater<pair<double, int>>());

	return scores[0].second;

}

