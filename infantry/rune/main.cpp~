#include <stdio.h>
#include <opencv2/opencv.hpp>
#include <iostream>

using namespace std;
using namespace cv;

int thresh = 182;
int max_thresh = 255;
RNG rng(12345);

int main(int argc, char** argv )
{
    
    Mat original_img;
    original_img = imread("1.bmp");
    resize(original_img, original_img, Size(480, 640));
    Mat img = original_img;
 
    Size size(9,9);  
    GaussianBlur(img,img,size,0);
    cvtColor(img, img, CV_BGR2GRAY);  

    Canny(img, img, thresh, thresh*2, 3);

    Mat structuringElement = getStructuringElement(MORPH_RECT, Size(8, 8));
    dilate(img, img, structuringElement);

    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;

    findContours( img, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );
    
    vector<vector<Point> > contours_poly( contours.size() );
    vector<Rect> boundRect( contours.size() );
    vector<Point2f>center( contours.size() );

    cout << "Contours: " << contours.size() << endl;

    for( int i = 0; i < contours.size(); i++ ) {  
        approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true );
        boundRect[i] = boundingRect( Mat(contours_poly[i]) );
        //minEnclosingCircle( (Mat)contours_poly[i], center[i], radius[i] );
     }

    /* Check Rect Height-Width Ratio */
    for(int i = 0; i < boundRect.size(); i++) {
	int height = boundRect[i].height;
	int width = boundRect[i].width;

	cout << "Rect " << i << "Ratio = " << (float)height / (float)width << endl;
    }

    Scalar color = Scalar( rng.uniform(255, 255), rng.uniform(0,255), rng.uniform(0,255) );
    //fillPoly(img, boundRect, color);
    for(int i = 0; i < contours.size(); i++) {
        
	rectangle( img, boundRect[i].tl(), boundRect[i].br(), color, -1, 8, 0 );
        //drawContours( img, contours, i, color, 2, 8, hierarchy, 0, Point() );
        //cout << "ss" << contours[i].size() << endl;
    }
    //cvtColor(img, img, CV_GRAY2BGR);
    //cvtColor(original_img, original_img, CV_BGR2GRAY);
    //bitwise_and(original_img, img, img);

    //bitwise_not(img, img);  
    if ( !img.data )
    {
        printf("No image data \n");
        return -1;
    }
    namedWindow("Original Image", WINDOW_AUTOSIZE );
    imshow("Original Image", original_img);
    namedWindow("Display Image", WINDOW_AUTOSIZE );
    imshow("Display Image", img);

    waitKey(0);

    return 0;
}
